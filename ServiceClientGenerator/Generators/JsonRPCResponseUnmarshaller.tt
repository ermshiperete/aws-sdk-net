<#@ template language="C#" inherits="BaseResponseUnmarshaller"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    AddLicenseHeader();

    AddCommonUsingStatements();
#>
using ThirdParty.Json.LitJson;

namespace <#=this.Config.Namespace #>.Model.Internal.MarshallTransformations
{
    /// <summary>
    /// Response Unmarshaller for <#=this.UnmarshallerBaseName #> operation
    /// </summary>  
    public class <#=this.UnmarshallerBaseName #>ResponseUnmarshaller : JsonResponseUnmarshaller
    {
        public override AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context)
        {
            <#=this.UnmarshallerBaseName #>Response response = new <#=this.Operation.Name #>Response();

<#
    if( this.Operation.ResponseHasBodyMembers )
    {
        if (this.Operation.ResponseStructure.Payload != null)
        {
#>
            var unmarshaller = <#= this.Operation.ResponseBodyMembers[0].DetermineTypeUnmarshallerInstantiate() #>;
            response.<#=this.Operation.ResponseBodyMembers[0].PropertyName#> = unmarshaller.Unmarshall(context);
<#
        }
		else if(this.IsWrapped)
		{
#>
			response.<#=this.WrappedResultMember#> = <#=this.Structure.Name#>Unmarshaller.Instance.Unmarshall(context);
<#
		}
        else
        {
#>
            context.Read();
            int targetDepth = context.CurrentDepth;
            while (context.ReadAtDepth(targetDepth))
            {
<#
        
            foreach (var member in this.Operation.ResponseBodyMembers)
            {
#>
                if (context.TestExpression("<#=member.MarshallName#>", targetDepth))
                {
                    var unmarshaller = <#= member.DetermineTypeUnmarshallerInstantiate() #>;
                    response.<#=member.PropertyName#> = unmarshaller.Unmarshall(context);
                    continue;
                }
<#
            }
#>
            }
<#
        }
    }
	UnmarshallHeaders();
	ProcessStatusCode();
	ProcessResponseStream();
#>

            return response;
        }

        public override AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode)
        {
            ErrorResponse errorResponse = JsonErrorResponseUnmarshaller.GetInstance().Unmarshall(context);
<#
    foreach (var exception in this.Operation.Exceptions)
    {
#>
            if (errorResponse.Code != null && errorResponse.Code.Equals("<#=exception.Code #>"))
            {
                return new <#=exception.Name #>(errorResponse.Message, innerException, errorResponse.Type, errorResponse.Code, errorResponse.RequestId, statusCode);
            }
<#
    }
#>
            return new Amazon<#=this.Config.BaseName#>Exception(errorResponse.Message, innerException, errorResponse.Type, errorResponse.Code, errorResponse.RequestId, statusCode);
        }

<#	if(this.Operation.ResponseStreamingMember != null) {#>
        internal override bool HasStreamingProperty
        {
            get
            {
                return true;
            }
        }

<#
	}
    this.AddResponseSingletonMethod();
#>
    }
}